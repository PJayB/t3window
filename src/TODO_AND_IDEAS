High Priority
=============
- conjoining jamo should not be rendered separately, but only as a normalized
  codepoint. So if something in the range 0x1160 - 0x11FF is encountered, it
  should be dropped, regardless of the terminal type.
- gettext
- users should be able to disable the terminal capability detection. For
  example, for some versions of gnome-terminal it is probably better to simply
  disable drawing of combining characters.
- perhaps a limit to unicode level of what the terminal can draw (everything
  else will be replaced by replacement char), which can be controlled by the
  user, is desirable. This can prevent corruptions like the gnome-terminal one
  where some characters are drawn 2 cells wide, while only occupying 1.
- split files to be more manageble

Low Priority
============
- Allow re-detection of capabilities if the client asks for it.
- Do we need to change anything for non-ascii based encodings? One thing to
  account for is that the C standard specifies that the basic execution
  character set must have single byte encoding. So UTF-16 shouldn't occur. This
  doesn't mean it is ASCII though. It might be EBCDIC. Also take into account
  ssh sessions from ASCII to EBCDIC based machines!
- Finish UTF-8 detection/CJK detection
- zero-width characters at start of line?
- We can actually do the different detections interactively. The sequence of
  actions would be:
		- set attributes to 0
		- move cursor to postion 0
		- print the test sequence
		- move cursor to position 0
		- send the clear line seq
		- clear the known terminal output for line 0
		- update terminal line 0
  It would be best to combine as many test strings as possible.

  Note that doing the update on terminal line 0 requires that we take multi-
  threading into account fully, rather than the way we do it now.

- 256 color mode for xterm (and others). Coding this in the ATTR values is
  going to be somewhat difficult, because there aren't sufficient bits it the
  t3_chardata_t type left. Perhaps we should change the user mode to have a number
  of user modes such that the program can do this itself. However, this is not
  a very generic solution.

  We should consider the following: the current implementation encodes
  everything in 4 bytes quantities. However, only for the first character of
  a UTF-8 sequence do we really need to store any information. So we could store
  it that way. I.e., only store attribute bytes after the first byte of a
  UTF-8 sequence. This does complicate processing, but any scheme that will
  allow 256 colors will. The question is how much will it complicate processing?
  And how much overhead will it give?

  Another option, which may complicate processing less, is to encode everything
  in 2 byte quantities, of which the top bit indicates that more (attribute)
  words are following. That way we have an extensible scheme with the same or
  less overhead than the current scheme which does allow 256 colors.

  For example, we could use the following scheme, which would allow
  implementation with minimal changes to the existing code:

  0  | char       | FG (0)  | Unused
  1  | char       | FG (1)  | Unused
  2  | char       | FG (2)  | Unused
  3  | char       | FG (3)  | Unused
  4  | char       | FG (4)  | Unused
  5  | char       | BG (0)  | FG (5)
  6  | char       | BG (1)  | FG (6)
  7  | char       | BG (2)  | FG (7)
  8  | ACS        | BG (3)  | FG (8)
  9  | Bold       | BG (4)  | BG (5)
  10 | Reverse    | Blink   | BG (6)
  11 | Underline  | User    | BG (7)
  12 | Dim        | Unused  | BG (8)
  13 | width      | 0       | 0
  14 | width      | 0       | 0
  15 | more       | more    | 0

  The more bit indicates whether the following word is present. The location
  for the width bits are zero in the second and third word to allow the testing
  for whether a word is a character to be kept to a minimum (in many places the
  code simply skips until a non-zero-width character is found). A second feature
  is that the foreground and background have 5 bits in the first word to allow
  the use of the third word to be kept to a minimum. This of course works best
  if the default color is not "last color + 1", so that needs to be changed.
  The final feature is that the bits in the third word are aligned such that
  they require a minimum of masking and shifting [Unfortunately, the width bits
  are in the way for even less shifting]

Misc Information
================

First test string from mined:
C3 A5 D9 84 D8 A7 E0 B8 A9 E0 B8 A9 E5 88 88 E5 A2 A2

C3 A5: LATIN SMALL LETTER A WITH RING ABOVE [UTF:1]
D9 84: ARABIC LETTER LAM [UTF:1]
D8 A7: ARABIC LETTER ALEF [UTF:1]
E0 B8 A9: THAI CHARACTER SO RUSI [1]
E5 88 88: U+5208	[UTF:2]
E5 A2 A2: U+58A2	[UTF:2]

61 CC A1: a followed by COMBINING PALATALIZED HOOK BELOW length 1->support for combining, length 2->no support, length 3->no support for UTF-8

D9 84: ARABIC LETTER LAM
D8 A7: ARABIC LETTER ALEF
-> width = 1 if joining, otherwise width = 2

E5 88 88: U+5208
-> width = 1 if no double width, otherwise width = 2??

From the ncurses terminfo database: [this means that u7 and u6 should be interpreted
as cursor position report strings] From the terminfo file it seems that only
a single (very old) terminal does not adhere to the ANSI standard way. We
could use the terminfo file to verify that the capability exists and that
they conform to expectations. On the other hand, there are terminals
for which u6 and u7 are not included but which do support it (rxvt). This
means that we should just try use the default ANSI strings

# INTERPRETATION OF USER CAPABILITIES
#
# The System V Release 4 and XPG4 terminfo format defines ten string
# capabilities for use by applications, <u0>...<u9>.   In this file, we use
# certain of these capabilities to describe functions which are not covered
# by terminfo.  The mapping is as follows:
#
#	u9	terminal enquire string (equivalent to ANSI DA)
#	u8	terminal answerback description
#	u7	cursor position request (equivalent to VT100 DSR 6)
#	u6	cursor position report (equivalent to ANSI CPR)
#
# The terminal enquire string <u9> should elicit an answerback response
# from the terminal.  Common values for <u9> will be ^E (on older ASCII
# terminals) or \E[c (on newer VT100/ANSI-compatible terminals).
#
# The cursor position request (<u7>) string should elicit a cursor position
# report.  A typical value (for ANSI/VT100 terminals) is \E[6n.
#
# The terminal answerback description (u8) must consist of an expected
# answerback string.  The string may contain the following scanf(3)-like
# escapes:
#
#	%c	Accept any character
#	%[...]	Accept any number of characters in the given set
#
# The cursor position report (<u6>) string must contain two scanf(3)-style
# %d format elements.  The first of these must correspond to the Y coordinate
# and the second to the %d.  If the string contains the sequence %i, it is
# taken as an instruction to decrement each value after reading it (this is
# the inverse sense from the cup string).  The typical CPR value is
# \E[%i%d;%dR (on VT100/ ANSI-compatible terminals).
#
# These capabilities are used by tac(1m), the terminfo action checker soon
# to be distributed with ncurses.


From the tcgetattr man-page:

 Raw mode
       cfmakeraw()  sets  the terminal to something like the "raw" mode of the
       old Version 7 terminal driver: input is available character by  charac-
       ter,  echoing is disabled, and all special processing of terminal input
       and output characters is disabled.  The terminal attributes are set  as
       follows:

           termios_p->c_iflag &= ~(IGNBRK | BRKINT | PARMRK | ISTRIP
                           | INLCR | IGNCR | ICRNL | IXON);
           termios_p->c_oflag &= ~OPOST;
           termios_p->c_lflag &= ~(ECHO | ECHONL | ICANON | ISIG | IEXTEN);
           termios_p->c_cflag &= ~(CSIZE | PARENB);
           termios_p->c_cflag |= CS8;
