#!/usr/bin/python

import sys, os

old_versions = [ "1.0", "1.1", "2.0", "2.1", "3.0", "3.1", "3.2" ]
versions = [ "4.0", "4.1", "5.0", "5.1", "5.2", "6.0", "6.1" ]

def main():
	if len(sys.argv) != 2:
		sys.stderr.write("Usage: generate_available_since.py <DerivedAge file>\n");
		sys.exit(1)

	statrie = os.popen("statrie -p -r0x110000 -H'#include \"window_api.h\"' -e'T3_WINDOW_LOCAL extern' " +
		"-d generated -f available_since -n get_available_since t3_window_available_since", "w")

	derived_age = open(sys.argv[1], "r")
	for line in derived_age:
		line = line.strip()
		if len(line) == 0 or line.startswith('#'):
			continue
		range, _ , version = line.partition(';')
		version, _, _ = version.partition('#')
		version = version.strip()
		range_start, _, range_end = range.partition("..")
		range_start = int(range_start, 16)
		range_end = int(range_end, 16) if range_end != '' else range_start
		if version in old_versions:
			value = 0
		elif version in versions:
			value = versions.index(version)
		else:
			print "Version {0} has not been assigned an index yet"
			sys.exit(1)

		for i in xrange(range_start, range_end):
			statrie.write("{0} {1}\n".format(i, value))

	statrie.close()
	versions_header = open("generated/versions.h", "w+")
	versions_header.write("/* This file has been automtically generated by {0}. DO NOT EDIT. */\n".format(os.path.basename(sys.argv[0])))
	versions_header.write("#ifndef T3_WINDOW_VERSIONS_H\n#define T3_WINDOW_VERSIONS_H\nenum {\n")
	first = True
	for version in versions:
		if not first:
			versions_header.write(",\n")
		else:
			first = False
		versions_header.write("\tT3_UNICODE_{0}".format(version.replace(".", "")))
	versions_header.write("\n};\n#endif\n")
	versions_header.close()

if __name__ == "__main__":
	main()
